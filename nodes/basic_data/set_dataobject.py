# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####

import parser
import ast

import bpy


import mathutils
from mathutils import Matrix, Vector, Euler, Quaternion, Color

from bpy.props import StringProperty, BoolProperty, EnumProperty
from sverchok.node_tree import SverchCustomTreeNode, VerticesSocket
from sverchok.data_structure import (updateNode, 
                                     SvGetSocketAnyType, match_long_repeat)
from sverchok.utils.sv_itertools import sv_zip_longest

def parse_to_path(p):
    '''
    Create a path and can be looked up easily.
    Return an array of tuples with op type and value
    ops are:
    name - global name to use
    attr - attribute to get using getattr(obj,attr)
    key - key for accesing via obj[key]
    '''
    
    if isinstance(p, ast.Attribute):
        return parse_to_path(p.value)+[("attr", p.attr)] 
    elif isinstance(p, ast.Subscript):
        if isinstance(p.slice.value, ast.Num):
            return  parse_to_path(p.value) + [("key",p.slice.value.n)]
        elif isinstance(p.slice.value, ast.Str):
            return parse_to_path(p.value) + [("key", p.slice.value.s)] 
    elif isinstance(p, ast.Name):
        return [("name", p.id)]
    else:
        raise NameError
        
def get_object(curr_obj, path):
    '''
    access the object speciefed from a path
    generated by parse_to_path
    will fail if path is invalid
    '''
    curr_object = curr_obj
    for t, value in path[1:]:
        if t=="attr":
            curr_object = getattr(curr_object, value)
        elif t=="key":
            curr_object = curr_object[value]
    return curr_object
    
def assign_data(obj, data):
    '''
    assigns data to the object
    '''
    if isinstance(obj, (int, float, str)):
        # doesn't work
        obj = data
    elif isinstance(obj, (Vector, Color)):
        obj[:] = data 
    elif isinstance(obj, (Matrix, Euler, Quaternion)):
        mats = Matrix_generate(data)
        mat = mats[0]
        if isinstance(obj, Euler):
            eul = mat.to_euler(obj.order)
            obj[:] = eul
        elif isinstance(obj, Quaternion):
            quat = mat.to_quaternion()
            obj[:] = quat 
        else: #isinstance(obj, Matrix)
            obj[:] = mat
    else: # super optimistic guess
        obj[:] = type(obj)(data)


class SvSetDataObjectNode(bpy.types.Node, SverchCustomTreeNode):
    ''' Set Object Props '''
    bl_idname = 'SvSetDataObjectNode'
    bl_label = 'set_dataobject'
    bl_icon = 'OUTLINER_OB_EMPTY'

    modes = [
        ("location",   "Location",   "", 1),
        ("scale",   "Scale",   "", 2),
        ("rotation_euler",   "Rotation_Euler",   "", 3),
        ("delta_location",   "Delta_Location",   "", 4),
        ("delta_scale",   "Delta_Scale",   "", 5),
        ("delta_rotation_euler",   "Delta_Rotation_Euler",   "", 6),
        ("custom",   "Custom",   "", 7)
    ]

    formula = StringProperty(name='formula',
                             description='property to asign value',
                             default='select', update=updateNode)

    Modes = EnumProperty(name="property modes", description="Objects property",
                         default="location", items=modes, update=updateNode)

    def draw_buttons(self, context, layout):
        if self.Modes == 'custom':
            layout.prop(self,  "formula", text="")
        row = layout.row(align=True)
        layout.prop(self, "Modes", "Objects property")

    def sv_init(self, context):
        self.inputs.new('SvObjectSocket', 'Objects')
        self.inputs.new('VerticesSocket', 'values').use_prop = True

    def process(self):

        objs = self.inputs['Objects'].sv_get()
        if isinstance(self.inputs['values'].sv_get()[0][0],(tuple)):
            Val = [Vector(i) for i in self.inputs['values'].sv_get()[0]]
        else:
            Val = self.inputs['values'].sv_get()[0]


        if self.Modes != 'custom':
            Prop = self.Modes
            for obj,val in sv_zip_longest(objs, Val):
                setattr(obj, Prop, val)
        else:
            ast_path = ast.parse("obj."+self.formula)
            path = parse_to_path(ast_path.body[0].value)    
            for obj,val in sv_zip_longest(objs, Val):
                real_obj = get_object(obj, path)
                if isinstance(real_obj, (int, float,str,list,object)):
                    if isinstance(real_obj,str):
                        val = str(val)
                    real_obj = get_object(obj, path[:-1])
                    p_type, value = path[-1]
                    if p_type == "attr":
                        setattr(real_obj, value, val)
                    else: 
                        real_obj[value] = val
                else:
                    assign_data(obj, val)


        '''
        while g != len(ObjectID):
            if ObjectID[g] != None:
                exec("ObjectID[g]."+Prop+"= Val[g]")
            g = g+1
        '''


def register():
    bpy.utils.register_class(SvSetDataObjectNode)


def unregister():
    bpy.utils.unregister_class(SvSetDataObjectNode)
